# -*- coding: utf-8 -*-
"""Grapes_Svr.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/112EFLagD1PXmfCRY06G7UwEThlDY-Gii
"""

import pandas as pd 
import numpy as np 
from sklearn.linear_model import LinearRegression 
from sklearn.svm import SVR 
import plotly.graph_objects as go 
import plotly.express as px 
import time

datasettrain = pd.read_csv('36.csv', encoding='utf-8')
# Print Dataframe
datasettrain

datasettest = pd.read_csv('36.csv', encoding='utf-8')
# Print Dataframe
datasettest

X_train=datasettrain.iloc[0:8, [0]]
y_train=datasettrain.iloc[0:8:, [9]]
X_test=datasettest.iloc[[11], [0]]
y_test=datasettest.iloc[[11], [9]]

X_test

y_test

from sklearn.preprocessing import StandardScaler
sc_X=StandardScaler()
sc_y=StandardScaler()
X_train= sc_X.fit_transform(X_train)
y_train= sc_y.fit_transform(y_train)

X_t= sc_X.fit_transform(X_test)
y_t= sc_y.fit_transform(y_test)

from sklearn.model_selection import GridSearchCV
from sklearn.metrics import make_scorer
from sklearn.metrics import mean_squared_error
scorer = make_scorer(mean_squared_error, greater_is_better=False)

  
# defining parameter range
param_grid = {'C': [20, 21, 22, 23, 24,25,1,50,100], 
              'gamma': [1, 0.1, 0.01, 0.001, 0.0001],
              'kernel': ['rbf','linear','poly'],
              'epsilon':[0.01,0.02,0.03,0.04,0.05,0.001,0.0001]} 
  
grid = GridSearchCV(SVR(), param_grid, refit = True,cv=2, verbose = 3,scoring=scorer)
  
# fitting the model for grid search
grid.fit(X_t, y_t)

print(grid.best_estimator_)

from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error
regressor = SVR(C=20, cache_size=200, coef0=0.0, degree=3, epsilon=0.01, gamma=1,
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False)



regressor.fit(X_train,y_train)



start = time.time()
y_pred= sc_y.inverse_transform(regressor.predict(sc_X.transform(X_test)))
mse = mean_squared_error(y_test, y_pred)
mse
y_pred
end = time.time()
print(f"Runtime of the program is {end - start}")